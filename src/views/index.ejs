<!DOCTYPE html>
<html lang="zh-TW">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>WebSocket 聊天室</title>
    <style>
      body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        max-width: 800px;
        margin: 50px auto;
        padding: 20px;
        line-height: 1.6;
        background-color: #f5f5f5;
      }
      .container {
        background: white;
        padding: 40px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }
      h1 {
        color: #333;
        text-align: center;
        margin-bottom: 30px;
      }
      .message {
        background: #e8f5e8;
        padding: 20px;
        border-radius: 5px;
        border-left: 4px solid #4caf50;
        margin: 20px 0;
      }
      .info {
        background: #e3f2fd;
        padding: 15px;
        border-radius: 5px;
        margin: 20px 0;
      }
      code {
        background: #f1f1f1;
        padding: 2px 6px;
        border-radius: 3px;
        font-family: 'Courier New', monospace;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h1>WebSocket 聊天室</h1>
      <div id="ws-status">WebSocket 狀態：未連接</div>
      <button id="btn-start-chat">開始聊天</button>
      <div id="chat-container"></div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        let user = null;
        let isChatting = false;

        function connectWebSocket() {
          const ws = new WebSocket('ws://localhost:8080');

          ws.onopen = () => {
            document.getElementById('ws-status').textContent = 'WebSocket 狀態：已連接';
            console.log('WebSocket 已連接');
          };

          ws.onclose = () => {
            document.getElementById('ws-status').textContent = 'WebSocket 狀態：已斷開';
            console.log('WebSocket 已斷開');
          };

          ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            if (data.user) {
              user = data.user;
              console.log('我的 user id:', user);
            }

            console.log('收到訊息：', data);

            const messages = JSON.parse(event.data);
            const messagesContainer = document.getElementById('messages');

            messagesContainer.innerHTML = '';
            messages.forEach((message) => {
              const messageElement = document.createElement('div');
              messageElement.innerHTML = `
                <div class="message">
                  <span class="user">${message.user.slice(0, 5)}</span>
                  <span class="timestamp">${new Date(message.timestamp).toLocaleTimeString()}</span>
                  <span class="content">${message.message}</span>
                </div>
              `;
              messagesContainer.appendChild(messageElement);
            });
          };

          ws.onerror = (error) => {
            console.error('WebSocket 錯誤：', error);
          };

          document.getElementById('send-button').addEventListener('click', () => {
            const message = document.getElementById('message-input').value;
            const timestamp = Date.now();
            ws.send(JSON.stringify({ message, timestamp, user }));
          });
        }

        document.getElementById('btn-start-chat').addEventListener('click', () => {
          if (!isChatting) {
            isChatting = true;
            document.getElementById('btn-start-chat').textContent = '停止聊天';
            document.getElementById('chat-container').innerHTML = `
              <div id="messages"></div>
              <input type="text" id="message-input" placeholder="輸入訊息" />
              <button id="send-button">發送</button>
            `;
            connectWebSocket();
          } else {
            isChatting = false;
            document.getElementById('btn-start-chat').textContent = '開始聊天';
            document.getElementById('chat-container').innerHTML = '';
            ws.close();
          }
        });
      });
    </script>
  </body>
</html>
